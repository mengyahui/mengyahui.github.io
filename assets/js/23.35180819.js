(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{338:function(t,r,o){"use strict";o.r(r);var n=o(7),i=Object(n.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"一、springboot-是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、springboot-是什么"}},[t._v("#")]),t._v(" 一、SpringBoot 是什么 ？")]),t._v(" "),r("p",[t._v("在介绍 SpringBoot 之前，先来简单介绍下 Spring。Spring 是诞生于 2002 年的 Java 开发框架，可以说已经成为 Java 开发的标准。")]),t._v(" "),r("p",[t._v("Spring 的 AOP 和 IOC 极大的简化了 Java 的开发，一个大型的项目往往需要集成很多组件，使用 Spring 的话每集成一个组件都需要写它的配置文件，这是相当繁琐且容易出错的。")]),t._v(" "),r("p",[t._v("SpringBoot 作为一个全新的框架应运而生，它是对 Spring 的进一步封装，其设计目的是用来简化 Spring 应用的初始搭建以及开发过程。")]),t._v(" "),r("p",[t._v("关于 SpringBoot 有一句很出名的话就是约定大于配置。SpringBoot 集成了大量常用的第三方框架配置，例如 Redis、MongoDB、MyBatis 等。这些第三方库几乎可以零配置的开箱即用，使得开发者能够更加专注与业务逻辑。")]),t._v(" "),r("h2",{attrs:{id:"二、为何会出现-springboot"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、为何会出现-springboot"}},[t._v("#")]),t._v(" 二、为何会出现 SpringBoot ？")]),t._v(" "),r("p",[t._v("SpringBoot 简化了 Spring 的开发，这只是最直观的一方面。事实上 SpringBoot 的诞生与它所处的大时代背景微服务密不可分。")]),t._v(" "),r("p",[t._v("随着微服务开发的需求极具增加，如何方便、快捷的构建一个标准生产环境的 Spring 应用也是摆在开发者面前的一个难题，而 SpringBoot 框架的出现恰好完美地解决了这些问题，同时其内部还简化了许多常用的第三方库配置，使得微服务开发更加便利，这也间接体现了 SpringBoot 框架的优势和学习 SpringBoot 的必要性。")]),t._v(" "),r("p",[t._v("微服务架构是⼀种架构模式，它提倡将单⼀应⽤程序划分成⼀组⼩的服务，服务之间互相协调、互相配合，为⽤户提供最终价值。每个服务运⾏在其独⽴的进程中，服务与服务间采⽤轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进⾏构建，并且能够被独⽴的部署到⽣产环境、类⽣产环境等。另外，应当尽量避免统⼀的、集中式的服务管理机制，对具体的⼀个服务⽽⾔，应根据业务上下⽂，选择合适的语⾔、⼯具对其进⾏构建。")]),t._v(" "),r("h2",{attrs:{id:"三、springboot-的开箱即用体现在那里"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、springboot-的开箱即用体现在那里"}},[t._v("#")]),t._v(" 三、SpringBoot 的开箱即用体现在那里？")]),t._v(" "),r("p",[t._v("SpringBoot 的开箱即用一方面体现在约定优于配置的特性，也是实现自动装配的关键；另一方面是基于开箱即用的自动装配模块 SpringBoot Starter 技术实现的。")]),t._v(" "),r("p",[t._v("SpringBoot Starter 将我们带入了一种“可插拔”的编程模式，我们只需要引入现成第三方框架的 Starter 依赖，并在代码中添加必要的注解，就可以获得对应的功能；同时还可以结合 SpringBoot 的自动装配机制，实现自定义的 Starter 组件，供第三方使用。")]),t._v(" "),r("p",[t._v("从 Starter 的命名上可以区分出两类 Starter")]),t._v(" "),r("ul",[r("li",[t._v("Spring 官方 Starter：命 名 应 遵 循 spring-boot-starter-{name} 的 格 式，如 spring-boot-starter-web")]),t._v(" "),r("li",[t._v("非 Spring 官方 Starter：命 名 应 遵 循 {name}-spring-boot-starter 的格式，如 mybatis-spring-boot-starter")])])])}),[],!1,null,null,null);r.default=i.exports}}]);